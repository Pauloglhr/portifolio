[
  {
    "id": 1,
    "styleCard": "tall",
    "imagem": "pesquisa-engajamento.png",
    "titulo": "PESQUISA DE ENGAJAMENTO",
    "mainImage": {
      "src": "https://placehold.co/1200x500/4a90e2/ffffff?text=Imagem+Principal",
      "alt": "Banner principal do projeto de pesquisa de engajamento"
    },
    "imageGallery": [
      {
        "src": "https://placehold.co/800x600/7ed321/000000?text=Imagem+2",
        "alt": "Primeira imagem da galeria"
      },
      {
        "src": "https://placehold.co/800x600/f5a623/000000?text=Imagem+3",
        "alt": "Segunda imagem da galeria"
      }
    ],
    "texto": "> Um formulário de perguntas construído para coletar opiniões e aprimorar meus conhecimentos em React.\n\nEste projeto é uma aplicação web de uma plataforma de perguntas que desenvolvi para aplicar meus conhecimentos em desenvolvimento front-end e resolver um problema proposto por um amigo. O objetivo principal era criar uma experiência de usuário limpa e funcional, onde fosse possível responder as questões de forma intuitiva.\n\n### Tecnologias e Ferramentas\n\n* **Front-End:** React.js, HTML5, CSS3, React Router;\n* **Ferramentas de Build/Deploy:** Vite, Vercel.\n\nO principal desafio que me propus foi criar uma plataforma de perguntas e respostas do zero para entender e aplicar o conceito de SPA (Single Page Application).\n\n### Objetivos e Desafios\n\nO objetivo central deste projeto era aprofundar meus conhecimentos em React, com um foco especial em dois pilares: a criação de rotas dinâmicas com React Router e o desenvolvimento de uma aplicação escalável e de fácil manutenção, seguindo as melhores práticas do mercado.\n\nDurante o desenvolvimento, um dos desafios mais interessantes foi criar um sistema de \"quiz\" dinâmico, onde as perguntas mudam na mesma tela sem a necessidade de recarregar a página, proporcionando uma experiência fluida ao usuário.\n\n> **O Problema:** Como gerenciar a exibição sequencial das perguntas, permitindo que o usuário avance ou retorne, mantendo a performance da aplicação?\n\n> **A Solução:** Para resolver este desafio, utilizei o gerenciamento de estado local do React através do hook `useState`. Criei um estado para armazenar o índice da página atual (ex: `const [idPaginaAtual, setIdPaginaAtual] = useState(0)`). A cada resposta registrada, a função de callback simplesmente incrementa ou decrementa esse índice, fazendo com que o React renderize eficientemente apenas a nova pergunta correspondente, o que otimiza a performance e a experiência do usuário."
  }
]
